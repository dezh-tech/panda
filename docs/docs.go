// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.dezh.tech/",
            "email": "hi@dezh.tech"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/domains": {
            "get": {
                "description": "Get a list of all domains with their attributes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Retrieve all domains",
                "responses": {
                    "200": {
                        "description": "Domains retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/pkg.ResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/handlers.DomainGetResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new domain with the specified attributes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Create a new domain",
                "parameters": [
                    {
                        "description": "Domain creation payload",
                        "name": "domain",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DomainCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Domain created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/pkg.ResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.DomainCreateResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request - Validation error",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    }
                }
            }
        },
        "/identifiers": {
            "get": {
                "description": "Get a list of all identifiers associated with the provided public key.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identifiers"
                ],
                "summary": "Retrieve all identifiers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "identifiers retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/pkg.ResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/handlers.IdentifierGetResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new identifier with the specified attributes. Returns success if the identifier is created successfully or relevant error messages if the creation fails.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identifiers"
                ],
                "summary": "Create a new identifier",
                "parameters": [
                    {
                        "description": "Identifier creation payload",
                        "name": "identifier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IdentifierCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identifier created successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Validation error or invalid input",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/pkg.ResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/validator.Varror"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Conflict - Identifier already exists",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/pkg.ResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/validator.Varror"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/pkg.ResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/validator.Varror"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates a new user using the provided public key. The request payload must include a valid public key for successful user creation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "Payload containing the public key for user creation",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    },
                    "409": {
                        "description": "Conflict - User with the specified public key already exists",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/pkg.ResponseDto"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.DomainCreateRequest": {
            "type": "object",
            "required": [
                "base_price_per_identifier",
                "default_ttl",
                "domain",
                "status"
            ],
            "properties": {
                "base_price_per_identifier": {
                    "type": "integer",
                    "minimum": 1
                },
                "default_ttl": {
                    "type": "integer",
                    "minimum": 1
                },
                "domain": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ]
                }
            }
        },
        "handlers.DomainCreateResponse": {
            "type": "object",
            "properties": {
                "id": {}
            }
        },
        "handlers.DomainGetResponse": {
            "type": "object",
            "properties": {
                "base_price_per_identifier": {
                    "type": "integer"
                },
                "default_ttl": {
                    "type": "integer"
                },
                "domain": {
                    "type": "string"
                },
                "id": {},
                "status": {
                    "type": "string"
                }
            }
        },
        "handlers.IdentifierCreateRequest": {
            "type": "object",
            "required": [
                "domain_id",
                "name",
                "pubkey"
            ],
            "properties": {
                "domain_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pubkey": {
                    "type": "string"
                }
            }
        },
        "handlers.IdentifierGetResponse": {
            "type": "object",
            "properties": {
                "domain_id": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "full_identifier": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pubkey": {
                    "type": "string"
                }
            }
        },
        "handlers.UserCreateRequest": {
            "type": "object",
            "required": [
                "pubKey"
            ],
            "properties": {
                "pubKey": {
                    "type": "string"
                }
            }
        },
        "pkg.ResponseDto": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/validator.Varror"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "validator.ValidationError": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "validator.Varror": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "validation_errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/validator.ValidationError"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Panda Swagger",
	Description:      "Panda is a NOSTR NIP-05 management service developed by Dezh.tech (Dezh technologies).",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
