// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: example.proto

package grpc_client

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GetStringService_GetString_FullMethodName = "/service.v1.GetStringService/GetString"
)

// GetStringServiceClient is the client API for GetStringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetStringServiceClient interface {
	GetString(ctx context.Context, in *GetStringRequest, opts ...grpc.CallOption) (*GetStringResponse, error)
}

type getStringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetStringServiceClient(cc grpc.ClientConnInterface) GetStringServiceClient {
	return &getStringServiceClient{cc}
}

func (c *getStringServiceClient) GetString(ctx context.Context, in *GetStringRequest, opts ...grpc.CallOption) (*GetStringResponse, error) {
	out := new(GetStringResponse)
	err := c.cc.Invoke(ctx, GetStringService_GetString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetStringServiceServer is the server API for GetStringService service.
// All implementations should embed UnimplementedGetStringServiceServer
// for forward compatibility
type GetStringServiceServer interface {
	GetString(context.Context, *GetStringRequest) (*GetStringResponse, error)
}

// UnimplementedGetStringServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGetStringServiceServer struct {
}

func (UnimplementedGetStringServiceServer) GetString(context.Context, *GetStringRequest) (*GetStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetString not implemented")
}

// UnsafeGetStringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetStringServiceServer will
// result in compilation errors.
type UnsafeGetStringServiceServer interface {
	mustEmbedUnimplementedGetStringServiceServer()
}

func RegisterGetStringServiceServer(s grpc.ServiceRegistrar, srv GetStringServiceServer) {
	s.RegisterService(&GetStringService_ServiceDesc, srv)
}

func _GetStringService_GetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetStringServiceServer).GetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetStringService_GetString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetStringServiceServer).GetString(ctx, req.(*GetStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetStringService_ServiceDesc is the grpc.ServiceDesc for GetStringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetStringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.GetStringService",
	HandlerType: (*GetStringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetString",
			Handler:    _GetStringService_GetString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
